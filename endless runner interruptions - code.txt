#include <LiquidCrystal.h>

#define PIN_BUTTON 2
#define PIN_READWRITE 10
#define PIN_CONTRAST 12
#define PIN_RESET 13  // Pinul 13 pentru butonul de restart


#define SPRITE_RUN1 1
#define SPRITE_RUN2 2
#define SPRITE_JUMP 3
#define SPRITE_JUMP_UPPER '.'  // Use the . character for the head
#define SPRITE_JUMP_LOWER 4
#define SPRITE_TERRAIN_EMPTY '.'  // User the . character
#define SPRITE_TERRAIN_SOLID 5
#define SPRITE_TERRAIN_SOLID_RIGHT 6
#define SPRITE_TERRAIN_SOLID_LEFT 7

#define HERO_HORIZONTAL_POSITION 1  // Horizontal position of hero on screen

#define TERRAIN_WIDTH 16
#define TERRAIN_EMPTY 0
#define TERRAIN_LOWER_BLOCK 1
#define TERRAIN_UPPER_BLOCK 2

#define HERO_POSITION_OFF 0  // Hero is invisible

#define HERO_POSITION_RUN_LOWER_1 1  // Hero is running on lower row (pose 1)
#define HERO_POSITION_RUN_LOWER_2 2  // (pose 2)

#define HERO_POSITION_JUMP_1 3   // Starting a jump
#define HERO_POSITION_JUMP_2 4   // Half-way up
#define HERO_POSITION_JUMP_3 5   // Jump is on upper row
#define HERO_POSITION_JUMP_4 6   // Jump is on upper row
#define HERO_POSITION_JUMP_5 7   // Jump is on upper row
#define HERO_POSITION_JUMP_6 8   // Jump is on upper row
#define HERO_POSITION_JUMP_7 9   // Half-way down
#define HERO_POSITION_JUMP_8 10  // About to land

#define HERO_POSITION_RUN_UPPER_1 11  // Hero is running on upper row (pose 1)
#define HERO_POSITION_RUN_UPPER_2 12  // (pose 2)

LiquidCrystal lcd(7, 6, 5, 4, 3, 1);
static char terrainUpper[TERRAIN_WIDTH + 1];
static char terrainLower[TERRAIN_WIDTH + 1];
static bool buttonPushed = false;
static bool heroOnUpperSide = false;  // Tracks if the hero is on the upper side

// Nivelul curent al jocului
static byte level = 1;
static unsigned long levelTime = 0;  // Timpul pentru nivel
static unsigned int levelThreshold[] = {10, 30, 50, 70, 100}; // Praguri pentru niveluri (scor)
static unsigned int levelSpeed[] = {150, 100, 50, 30, 15}; // Viteza pentru fiecare nivel (mai mică = mai rapid)

void initializeGraphics() {
  static byte graphics[] = {
    // Run position 1
    B01100,
    B01100,
    B00000,
    B01110,
    B11100,
    B01100,
    B11010,
    B10011,
    // Run position 2
    B01100,
    B01100,
    B00000,
    B01100,
    B01100,
    B01100,
    B01100,
    B01110,
    // Jump
    B01100,
    B01100,
    B00000,
    B11110,
    B01101,
    B11111,
    B10000,
    B00000,
    // Jump lower
    B11110,
    B01101,
    B11111,
    B10000,
    B00000,
    B00000,
    B00000,
    B00000,
    // Ground
    B11111,
    B11111,
    B11111,
    B11111,
    B11111,
    B11111,
    B11111,
    B11111,
    // Ground right
    B00011,
    B00011,
    B00011,
    B00011,
    B00011,
    B00011,
    B00011,
    B00011,
    // Ground left
    B11000,
    B11000,
    B11000,
    B11000,
    B11000,
    B11000,
    B11000,
    B11000,
  };

  int i;
  for (i = 0; i < 7; ++i) {
    lcd.createChar(i + 1, &graphics[i * 8]);
  }
  for (i = 0; i < TERRAIN_WIDTH; ++i) {
    terrainUpper[i] = SPRITE_TERRAIN_EMPTY;
    terrainLower[i] = SPRITE_TERRAIN_EMPTY;
  }
}

void advanceTerrain(char* terrain, byte newTerrain) {
  for (int i = 0; i < TERRAIN_WIDTH; ++i) {
    char current = terrain[i];
    char next = (i == TERRAIN_WIDTH - 1) ? newTerrain : terrain[i + 1];
    switch (current) {
      case SPRITE_TERRAIN_EMPTY:
        terrain[i] = (next == SPRITE_TERRAIN_SOLID) ? SPRITE_TERRAIN_SOLID_RIGHT : SPRITE_TERRAIN_EMPTY;
        break;
      case SPRITE_TERRAIN_SOLID:
        terrain[i] = (next == SPRITE_TERRAIN_EMPTY) ? SPRITE_TERRAIN_SOLID_LEFT : SPRITE_TERRAIN_SOLID;
        break;
      case SPRITE_TERRAIN_SOLID_RIGHT:
        terrain[i] = SPRITE_TERRAIN_SOLID;
        break;
      case SPRITE_TERRAIN_SOLID_LEFT:
        terrain[i] = SPRITE_TERRAIN_EMPTY;
        break;
    }
  }
}

bool drawHero(byte position, char* terrainUpper, char* terrainLower, unsigned int score) {
  bool collide = false;
  char upperSave = terrainUpper[HERO_HORIZONTAL_POSITION];
  char lowerSave = terrainLower[HERO_HORIZONTAL_POSITION];
  byte upper, lower;

  switch (position) {
    case HERO_POSITION_OFF:
      upper = lower = SPRITE_TERRAIN_EMPTY;
      break;
    case HERO_POSITION_RUN_LOWER_1:
      upper = SPRITE_TERRAIN_EMPTY;
      lower = SPRITE_RUN1;
      break;
    case HERO_POSITION_RUN_LOWER_2:
      upper = SPRITE_TERRAIN_EMPTY;
      lower = SPRITE_RUN2;
      break;
    case HERO_POSITION_JUMP_1:
    case HERO_POSITION_JUMP_8:
      upper = SPRITE_TERRAIN_EMPTY;
      lower = SPRITE_JUMP;
      break;
    case HERO_POSITION_JUMP_2:
    case HERO_POSITION_JUMP_7:
      upper = SPRITE_JUMP_UPPER;
      lower = SPRITE_JUMP_LOWER;
      break;
    case HERO_POSITION_JUMP_3:
    case HERO_POSITION_JUMP_4:
    case HERO_POSITION_JUMP_5:
    case HERO_POSITION_JUMP_6:
      upper = SPRITE_JUMP;
      lower = SPRITE_TERRAIN_EMPTY;
      break;
    case HERO_POSITION_RUN_UPPER_1:
      upper = SPRITE_RUN1;
      lower = SPRITE_TERRAIN_EMPTY;
      break;
    case HERO_POSITION_RUN_UPPER_2:
      upper = SPRITE_RUN2;
      lower = SPRITE_TERRAIN_EMPTY;
      break;
  }

  if (upper != SPRITE_TERRAIN_EMPTY) {
    terrainUpper[HERO_HORIZONTAL_POSITION] = upper;
    collide = (upperSave != SPRITE_TERRAIN_EMPTY);
  }
  if (lower != SPRITE_TERRAIN_EMPTY) {
    terrainLower[HERO_HORIZONTAL_POSITION] = lower;
    collide |= (lowerSave != SPRITE_TERRAIN_EMPTY);
  }

  terrainUpper[TERRAIN_WIDTH] = '\0';
  terrainLower[TERRAIN_WIDTH] = '\0';
  lcd.setCursor(0, 0);
  lcd.print(terrainUpper);
  lcd.setCursor(0, 1);
  lcd.print(terrainLower);

  lcd.setCursor(13, 0);
  //lcd.print("Score:");
  //lcd.setCursor(16 - String(score).length(), 0);
  lcd.print(score);

  terrainUpper[HERO_HORIZONTAL_POSITION] = upperSave;
  terrainLower[HERO_HORIZONTAL_POSITION] = lowerSave;

  return collide;
}

void buttonPush() {
  buttonPushed = true;
}


void setup() {
  pinMode(PIN_READWRITE, OUTPUT);
  digitalWrite(PIN_READWRITE, LOW);
  pinMode(PIN_CONTRAST, OUTPUT);
  digitalWrite(PIN_CONTRAST, LOW);
  pinMode(PIN_BUTTON, INPUT_PULLUP);
  digitalWrite(PIN_BUTTON, HIGH);
  pinMode(PIN_RESET, INPUT_PULLUP);  // Setați pinul 13 ca intrare cu pull-up intern


  attachInterrupt(0, buttonPush, FALLING);
  initializeGraphics();
  lcd.begin(16, 2);

  // Mesajul de început
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Press 1st button");
  lcd.setCursor(4, 1);
  lcd.print("to start");
  while (!buttonPushed) {
    delay(100);
  }
  buttonPushed = false;
  lcd.clear();
}


// Array static pentru a păstra ultimele 3 scoruri
static unsigned int lastScores[3] = {0, 0, 0};

// Funcție pentru a actualiza ultimele scoruri
void updateLastScores(unsigned int newScore) {
  // Mutăm scorurile anterioare
  lastScores[2] = lastScores[1];
  lastScores[1] = lastScores[0];
  lastScores[0] = newScore;  // Adăugăm noul scor
}

void loop() {
  static byte heroPos = HERO_POSITION_RUN_LOWER_1;
  static byte newTerrainType = TERRAIN_EMPTY;
  static byte newTerrainDuration = 1;
  static bool playing = true;  // Inițial, jocul este activ
  static bool blink = false;
  static unsigned int distance = 0;

  if (digitalRead(PIN_RESET) == LOW) {
    level = 1;
    distance = 0;
    heroPos = HERO_POSITION_RUN_LOWER_1;
    newTerrainType = TERRAIN_EMPTY;
    newTerrainDuration = 1;
    playing = true;
    levelTime = millis();
    memset(terrainUpper, SPRITE_TERRAIN_EMPTY, sizeof(terrainUpper));
    memset(terrainLower, SPRITE_TERRAIN_EMPTY, sizeof(terrainLower));
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Press 1st button");
    lcd.setCursor(4, 1);
    lcd.print("to start");
    while (!buttonPushed) {
      delay(100);
    }
    buttonPushed = false;
    lcd.clear();
  }

  if (playing) {
    if (buttonPushed) {
      heroOnUpperSide = !heroOnUpperSide;
      buttonPushed = false;
    }

    if (heroOnUpperSide) {
      heroPos = (heroPos == HERO_POSITION_RUN_UPPER_1) ? HERO_POSITION_RUN_UPPER_2 : HERO_POSITION_RUN_UPPER_1;
    } else {
      heroPos = (heroPos == HERO_POSITION_RUN_LOWER_1) ? HERO_POSITION_RUN_LOWER_2 : HERO_POSITION_RUN_LOWER_1;
    }

    advanceTerrain(terrainLower, newTerrainType == TERRAIN_LOWER_BLOCK ? SPRITE_TERRAIN_SOLID : SPRITE_TERRAIN_EMPTY);
    advanceTerrain(terrainUpper, newTerrainType == TERRAIN_UPPER_BLOCK ? SPRITE_TERRAIN_SOLID : SPRITE_TERRAIN_EMPTY);

    if (--newTerrainDuration == 0) {
      if (newTerrainType == TERRAIN_EMPTY) {
        newTerrainType = (random(3) == 0) ? TERRAIN_UPPER_BLOCK : TERRAIN_LOWER_BLOCK;
        newTerrainDuration = 2 + random(10);
      } else {
        newTerrainType = TERRAIN_EMPTY;
        newTerrainDuration = 10 + random(10);
      }
    }

    if (drawHero(heroPos, terrainUpper, terrainLower, distance >> 3)) {
      playing = false;  // Jocul se oprește doar dacă personajul se lovește de un obstacol
      updateLastScores(distance >> 3);  // Actualizăm scorurile la finalul jocului
    } else {
      ++distance;

      // Verifică dacă scorul a depășit pragul pentru schimbarea nivelului
      if (distance >> 3 >= levelThreshold[level - 1]) {
        level++;
        if (level <= 5) {  // Dacă nu am ajuns la nivelul 6
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Level ");
          lcd.print(level);
          delay(1000);  // Arată nivelul pentru câteva momente
        } else {
          playing = false;  // Jocul se oprește după nivelul 5
        }
        levelTime = millis();  // Actualizează timpul nivelului
      }
    }

    delay(levelSpeed[level - 1]);  // Ajustează viteza jocului în funcție de nivel
  } else {
    // Dacă jocul s-a încheiat
    lcd.clear();
    if (level == 6) {
      lcd.setCursor(0, 0);
      lcd.print("Congratulations!");
      delay(2000);  // Afișează "Congratulations!" timp de 2 secunde

      // Afișează ultimele 3 scoruri
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Last Scores:");
      for (int i = 0; i < 3; i++) {
        lcd.setCursor(0, 1);
        lcd.print(i + 1);
        lcd.print(": ");
        lcd.print(lastScores[i]);
        delay(2000);  // Afișează fiecare scor timp de 2 secunde
      }
    } else {
      lcd.setCursor(4, 0);
      lcd.print("Game Over");
      lcd.setCursor(4, 1);
      lcd.print("Score: ");
      lcd.print(distance >> 3);
    }
    delay(250);
  }
}